package mum.mpp.atm.controller;import mum.mpp.atm.core.ATM;import mum.mpp.atm.core.Session;import mum.mpp.atm.model.Balance;import mum.mpp.atm.model.Card;import mum.mpp.atm.model.CustomerConsole;import mum.mpp.atm.model.Message;import mum.mpp.atm.model.Receipt;import mum.mpp.atm.model.Status;public abstract class Transaction {	protected ATM atm;	protected Session session;	protected Card card;	protected int pin;	protected int transactionId;	protected Message message;	protected Balance balance;	private static int nextTransactionId = 1;	private int state;	private static final int GETTING_SPECIFICS_STATE = 1;	private static final int SENDING_TO_BANK_STATE = 2;	private static final int INVALID_PIN_STATE = 3;	private static final int COMPLETING_TRANSACTION_STATE = 4;	private static final int PRINTING_RECEIPT_STATE = 5;	private static final int ASKING_DO_ANOTHER_STATE = 6;		protected abstract Message getCustomerInputs() throws CustomerConsole.Cancelled;		protected abstract Receipt completeTransaction() throws CustomerConsole.Cancelled;		protected Transaction(ATM atm, Session session, Card card, int pin) {		this.atm = atm;		this.session = session;		this.card = card;		this.pin = pin;		this.transactionId = nextTransactionId++;		this.balance = new Balance();		state = GETTING_SPECIFICS_STATE;	}	public boolean performTransaction() throws CardRetained {		String doAnotherMessage = "";		Status status = null;		Receipt receipt = null;		while (true) 		{			switch (state) {			case GETTING_SPECIFICS_STATE:				try {					message = getCustomerInputs();					atm.getCustomerConsole().display("");					state = SENDING_TO_BANK_STATE;				} catch (CustomerConsole.Cancelled e) {					doAnotherMessage = "Last transaction was cancelled";					state = ASKING_DO_ANOTHER_STATE;				}				break;			case SENDING_TO_BANK_STATE:				status = atm.getNetworkToBank().sendMessage(message, balance);				if (status.isInvalidPIN())					state = INVALID_PIN_STATE;				else if (status.isSuccess())					state = COMPLETING_TRANSACTION_STATE;				else {					doAnotherMessage = status.getMessage();					state = ASKING_DO_ANOTHER_STATE;				}				break;			case INVALID_PIN_STATE:				try {					status = performInvalidPINOperation();					if (status.isSuccess())						state = COMPLETING_TRANSACTION_STATE;					else {						doAnotherMessage = status.getMessage();						state = ASKING_DO_ANOTHER_STATE;					}				} catch (CustomerConsole.Cancelled e) {					doAnotherMessage = "Last transaction was cancelled";					state = ASKING_DO_ANOTHER_STATE;				}				break;			case COMPLETING_TRANSACTION_STATE:				try {					receipt = completeTransaction();					state = PRINTING_RECEIPT_STATE;				} catch (CustomerConsole.Cancelled e) {					doAnotherMessage = "Last transaction was cancelled";					state = ASKING_DO_ANOTHER_STATE;				}				break;			case PRINTING_RECEIPT_STATE:				atm.getReceiptPrinter().printReceipt(receipt);				state = ASKING_DO_ANOTHER_STATE;				break;			case ASKING_DO_ANOTHER_STATE:				if (doAnotherMessage.length() > 0)					doAnotherMessage += "\n";				try {					String[] yesNoMenu = { "Yes", "No" };					boolean doAgain = atm.getCustomerConsole().readMenuChoice(							doAnotherMessage + "Would you like to do another transaction?", yesNoMenu) == 0;					return doAgain;				} catch (CustomerConsole.Cancelled e) {					return false;				}			}		}	}	public Status performInvalidPINOperation() throws CustomerConsole.Cancelled, CardRetained {		Status status = null;		for (int i = 0; i < 3; i++) {			pin = atm.getCustomerConsole()					.readPIN("PIN was incorrect\nPlease re-enter your PIN\n" + "Then press ENTER");			atm.getCustomerConsole().display("");			message.setPIN(pin);			status = atm.getNetworkToBank().sendMessage(message, balance);			if (!status.isInvalidPIN()) {				session.setPIN(pin);				return status;			}		}		atm.getCardReader().retainCard();		atm.getCustomerConsole().display("Your card has been retained\nPlease contact the bank.");		try {			Thread.sleep(5000);		} catch (InterruptedException e) {		}		atm.getCustomerConsole().display("");		throw new CardRetained();	}	public int getTransactionId() {		return transactionId;	}	public static class CardRetained extends Exception {		/**		 * 		 */		private static final long serialVersionUID = 1L;		public CardRetained() {			super("Card retained due to too many invalid PINs");		}	}}