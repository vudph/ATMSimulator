package mum.mpp.atm.controller;import mum.mpp.atm.core.ATM;import mum.mpp.atm.core.Session;import mum.mpp.atm.model.AccountInformation;import mum.mpp.atm.model.Card;import mum.mpp.atm.model.CustomerConsole;import mum.mpp.atm.model.Message;import mum.mpp.atm.model.Money;import mum.mpp.atm.model.Receipt;public class WithdrawalTransaction extends Transaction {	private int from;	private Money amount;		public WithdrawalTransaction(ATM atm, Session session, Card card, int pin) {		super(atm, session, card, pin);	}	protected Message getCustomerInputs() throws CustomerConsole.Cancelled {		from = atm.getCustomerConsole().readMenuChoice("Account to withdraw from", AccountInformation.ACCOUNT_NAMES);		String[] amountOptions = { "$20", "$40", "$60", "$100", "$200" };		Money[] amountValues = { new Money(20), new Money(40), new Money(60), new Money(100), new Money(200) };		String amountMessage = "";		boolean validAmount = false;		while (!validAmount) {			amount = amountValues[atm.getCustomerConsole().readMenuChoice(amountMessage + "Amount of cash to withdraw",					amountOptions)];			validAmount = atm.getCashDispenser().checkCashOnHand(amount);			if (!validAmount)				amountMessage = "Insufficient cash available\n";		}		return new Message(Message.WITHDRAWAL, card, pin, transactionId, from, -1, amount);	}	protected Receipt completeTransaction() {		atm.getCashDispenser().dispenseCash(amount);		return new Receipt(this.atm, this.card, this, this.balance) {			{				detailsPortion = new String[2];				detailsPortion[0] = "WITHDRAWAL FROM: " + AccountInformation.ACCOUNT_ABBREVIATIONS[from];				detailsPortion[1] = "AMOUNT: " + amount.toString();			}		};	}}