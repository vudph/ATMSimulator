package mum.mpp.atm.core;import mum.mpp.atm.model.CardReader;import mum.mpp.atm.model.CashDispenser;import mum.mpp.atm.model.CustomerConsole;import mum.mpp.atm.model.DepositEnvelopAcceptor;import mum.mpp.atm.model.NetworkToBank;import mum.mpp.atm.model.ReceiptPrinter;public class ATM implements Runnable {	private int id;	private String place;	private String bankName;	private CardReader cardReader;	private CashDispenser cashDispenser;	private CustomerConsole customerConsole;	private DepositEnvelopAcceptor depositEnvelopAcceptor;	private NetworkToBank networkToBank;	private ReceiptPrinter receiptPrinter;	private int state;	private boolean cardInserted;	private static final int IDLE_STATE = 1;	private static final int SERVING_CUSTOMER_STATE = 2;		public ATM(int id, String place, String bankName) {		this.id = id;		this.place = place;		this.bankName = bankName;		cardReader = new CardReader();		cashDispenser = new CashDispenser();		customerConsole = new CustomerConsole();		depositEnvelopAcceptor = new DepositEnvelopAcceptor();		networkToBank = new NetworkToBank();		receiptPrinter = new ReceiptPrinter();		state = IDLE_STATE;		cardInserted = false;	}	public void run() {		Session currentSession = null;		while (true) {			switch (state) {			case IDLE_STATE:				customerConsole.display("Please insert your card");				cardInserted = false;				synchronized (this) {					try {						wait();					} catch (InterruptedException e) {					}				}				if (cardInserted) {					currentSession = new Session(this);					state = SERVING_CUSTOMER_STATE;				}				break;			case SERVING_CUSTOMER_STATE:				currentSession.performSession();				state = IDLE_STATE;				break;			}		}	}	public synchronized void cardInserted() {		cardInserted = true;		notify();	}	public int getID() {		return id;	}	public String getPlace() {		return place;	}	public String getBankName() {		return bankName;	}	public CardReader getCardReader() {		return cardReader;	}	public CashDispenser getCashDispenser() {		return cashDispenser;	}	public CustomerConsole getCustomerConsole() {		return customerConsole;	}	public DepositEnvelopAcceptor getDepositEnvelopAcceptor() {		return depositEnvelopAcceptor;	}	public NetworkToBank getNetworkToBank() {		return networkToBank;	}	public ReceiptPrinter getReceiptPrinter() {		return receiptPrinter;	}	}