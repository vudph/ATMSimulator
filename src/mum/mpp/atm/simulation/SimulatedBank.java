package mum.mpp.atm.simulation;import mum.mpp.atm.database.DatabaseApi;import mum.mpp.atm.database.entity.BankAccount;import mum.mpp.atm.model.Balance;import mum.mpp.atm.model.CustomerConsole.InvalidCard;import mum.mpp.atm.model.Message;import mum.mpp.atm.model.Money;import mum.mpp.atm.model.Status;public class SimulatedBank {    private static final Money DAILY_WITHDRAWAL_LIMIT = new Money(DatabaseApi.getDailyWithdrawalLimit());	public Status handleMessage(Message message, Balance balance) {		try {			if (!DatabaseApi.isValidPIN(message)) {				return new InvalidPIN();			}		} catch (InvalidCard e) {			return new Failure("Invalid card!");		}				switch (message.getMessageCode()) {		case Message.WITHDRAWAL:			return withdrawal(message, balance);		case Message.INITIATE_DEPOSIT:			return initiateDeposit(message);		case Message.COMPLETE_DEPOSIT:			return completeDeposit(message, balance);		case Message.TRANSFER:			return transfer(message, balance);		case Message.INQUIRY:			return inquiry(message, balance);		}		return null;	}	private Status withdrawal(Message message, Balance balances) {		int cardNumber = message.getCard().getNumber();		BankAccount bankAccount = DatabaseApi.getBankAccount(cardNumber, message.getFromAccount());		if (bankAccount == null)			return new Failure("Invalid account type");		Money amount = message.getAmount();		Money limitRemaining = new Money(DAILY_WITHDRAWAL_LIMIT);		long amountWithdrawalToday = DatabaseApi.getWithdrawalAmountToday(cardNumber);		limitRemaining.subtract(new Money(amountWithdrawalToday));		if (!amount.lessEqual(limitRemaining))			return new Failure("Daily withdrawal limit exceeded");		if (!amount.lessEqual(new Money(bankAccount.getAvailable())))			return new Failure("Insufficient available balance");		bankAccount.setBalance(bankAccount.getBalance() - amount.getCents());		bankAccount.setAvailable(bankAccount.getAvailable() - amount.getCents());				DatabaseApi.updateBankAccount(bankAccount);				balances.setBalance(new Money(bankAccount.getBalance()), new Money(bankAccount.getAvailable()));		DatabaseApi.insertWithdrawalAmountToday(cardNumber, amount.getCents());		return new Success();	}		private Status initiateDeposit(Message message) {		int cardNumber = message.getCard().getNumber();		BankAccount toAccount = DatabaseApi.getBankAccount(cardNumber, message.getToAccount());				if (toAccount == null)			return new Failure("Invalid account type");		return new Success();	}	private Status completeDeposit(Message message, Balance balances) {		int cardNumber = message.getCard().getNumber();		BankAccount toAccount = DatabaseApi.getBankAccount(cardNumber, message.getToAccount());				if (toAccount == null)			return new Failure("Invalid account type");		Money amount = message.getAmount();		toAccount.setBalance(toAccount.getBalance() + amount.getCents());		DatabaseApi.updateBankAccount(toAccount);				balances.setBalance(new Money(toAccount.getBalance()), new Money(toAccount.getAvailable()));		return new Success();	}	private Status transfer(Message message, Balance balances) {		int cardNumber = message.getCard().getNumber();				BankAccount fromAccount = DatabaseApi.getBankAccount(cardNumber, message.getFromAccount());		if (fromAccount == null)			return new Failure("Invalid account type");		BankAccount toAccount = DatabaseApi.getBankAccount(cardNumber, message.getToAccount());				if (message.getFromAccount() == message.getToAccount())			return new Failure("Can't transfer money from\n" + "an account to itself");		Money amount = message.getAmount();		if (!amount.lessEqual(new Money(fromAccount.getAvailable())))			return new Failure("Insufficient available balance");		fromAccount.setBalance(fromAccount.getBalance() - amount.getCents());		fromAccount.setAvailable(fromAccount.getAvailable() - amount.getCents());				toAccount.setBalance(toAccount.getBalance() + amount.getCents());		toAccount.setAvailable(toAccount.getAvailable() + amount.getCents());				DatabaseApi.updateBankAccount(fromAccount);		DatabaseApi.updateBankAccount(toAccount);				balances.setBalance(new Money(toAccount.getBalance()), new Money(toAccount.getAvailable()));		return new Success();	}	private Status inquiry(Message message, Balance balances) {		BankAccount bankAccount = DatabaseApi.getBankAccount(message.getCard().getNumber(), message.getFromAccount());		if (bankAccount == null)			return new Failure("Invalid account type");		balances.setBalance(new Money(bankAccount.getBalance()), new Money(bankAccount.getAvailable()));		return new Success();	}		private static class Success extends Status {		public boolean isSuccess() {			return true;		}		public boolean isInvalidPIN() {			return false;		}		public String getMessage() {			return null;		}	}	private static class Failure extends Status {		public Failure(String message) {			this.message = message;		}		public boolean isSuccess() {			return false;		}		public boolean isInvalidPIN() {			return false;		}		public String getMessage() {			return message;		}		private String message;	}	private static class InvalidPIN extends Failure {		public InvalidPIN() {			super("Invalid PIN");		}		public boolean isInvalidPIN() {			return true;		}	}}    