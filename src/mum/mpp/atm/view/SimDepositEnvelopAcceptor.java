package mum.mpp.atm.view;import java.awt.Button;import java.awt.Rectangle;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;class SimDepositEnvelopAcceptor extends Button {	/**	 * 	 */	private static final long serialVersionUID = 1L;	private boolean inserted;	private static long MAXIMUM_WAIT_TIME = 20 * 1000;		SimDepositEnvelopAcceptor() {		super("Click to insert envelope");		addActionListener(new ActionListener() {			public void actionPerformed(ActionEvent e) {				synchronized (SimDepositEnvelopAcceptor.this) {					inserted = true;					SimDepositEnvelopAcceptor.this.notify();				}			}		});	}	public synchronized boolean acceptDepositEnvelope() {		inserted = false;		setVisible(true);		// Wait for user to simulate inserting envelope by clicking button.		// If we wait 20 seconds and no envelope is entered, we time out		try {			wait(MAXIMUM_WAIT_TIME);		} catch (InterruptedException e) {		}		if (inserted) {			// Animate envelope going into the machine			Rectangle originalBounds = getBounds();			Rectangle currentBounds = new Rectangle(originalBounds.x, originalBounds.y, originalBounds.width,					originalBounds.height);			while (currentBounds.width > 0 && currentBounds.height > 0) {				setBounds(currentBounds.x, currentBounds.y, currentBounds.width, currentBounds.height);				repaint();				try {					Thread.sleep(100);				} catch (InterruptedException e) {				}				currentBounds.height -= 1;				currentBounds.width = (originalBounds.width * currentBounds.height) / originalBounds.height;				currentBounds.x = originalBounds.x + (originalBounds.width - currentBounds.width) / 2;				currentBounds.y = originalBounds.y + (originalBounds.height - currentBounds.height) / 2;			}			setVisible(false);			setBounds(originalBounds);		} else {			setVisible(false);		}		return inserted;	}	public synchronized void cancelRequested() {		notify(); // End the wait for the envelope - inserted will still					// be false so acceptEnvelope() will return false	}}