package mum.mpp.atm.view;import java.awt.*;import java.awt.event.*;import javax.swing.*;import mum.mpp.atm.view.utilities.SpringUtilities;class SimKeyboard extends Panel {	/**	 * 	 */	private static final long serialVersionUID = 1L;	private SimDisplay display;	private SimDepositEnvelopAcceptor envelopeAcceptor;	private int mode;	private static final int IDLE_MODE = 0;	private static final int PIN_MODE = Simulation.PIN_MODE;	private static final int AMOUNT_MODE = Simulation.AMOUNT_MODE;	private static final int MENU_MODE = Simulation.MENU_MODE;	private StringBuffer currentInput;	private boolean cancelled;	private int maxValue;		SimKeyboard(SimDisplay display, SimDepositEnvelopAcceptor envelopeAcceptor) {		this.display = display;		this.envelopeAcceptor = envelopeAcceptor;		SpringLayout mainLayout = new SpringLayout();		setLayout(mainLayout);		this.setBackground(Color.white);		// Create the keys representing digits		JPanel digitPanel = new JPanel();		digitPanel.setLayout(new SpringLayout());		digitPanel.setBackground(Color.white);				Button[] digitKey = new Button[10];		for (int i = 1; i < 10; i++) {			digitKey[i] = new Button("" + i);//			digitKey[i].setBackground(Color.gray);//			digitKey[i].setForeground(Color.black);//			digitKey[i].setBounds(50, 60, 20, 20);			digitPanel.add(digitKey[i]);		}		digitPanel.add(new Label(""));		digitKey[0] = new Button("0");		digitPanel.add(digitKey[0]);		digitPanel.add(new Label(""));		add(digitPanel);		SpringUtilities.makeCompactGrid(digitPanel, 4, 3, 5, 5, 10, 5);//		mainLayout.setConstraints(digitPanel, GUI.makeConstraints(0, 0, 3, 1, GridBagConstraints.BOTH));		// Create the function keys		JPanel functionPanel = new JPanel();		functionPanel.setLayout(new SpringLayout());		functionPanel.setBackground(Color.white);				JButton enterKey = new JButton("ENTER");		enterKey.setForeground(Color.white);		enterKey.setBackground(new Color(1, 67, 36)); // green		enterKey.setOpaque(true);		enterKey.setBorderPainted(false);//		enterKey.setSize(100, 500);		functionPanel.add(enterKey);		JButton clearKey = new JButton("CLEAR");		clearKey.setForeground(Color.white);		clearKey.setBackground(new Color(154, 117, 42)); // yellow		clearKey.setOpaque(true);		clearKey.setBorderPainted(false);		functionPanel.add(clearKey);		JButton cancelKey = new JButton("CANCEL");		cancelKey.setBackground(new Color(114, 22, 25));	// read		cancelKey.setForeground(Color.white);		cancelKey.setOpaque(true);		cancelKey.setBorderPainted(false);		functionPanel.add(cancelKey);				add(functionPanel);//		functionPanel.setBackground(Color.red);		SpringUtilities.makeGrid(functionPanel, 3, 1, 5, 5, 5, 5);//		mainLayout.setConstraints(functionPanel, GUI.makeConstraints(0, 1, 2, 2, GridBagConstraints.VERTICAL));		SpringUtilities.makeCompactGrid(this, 1, 2, 0, 0, 0, 0);				// Add action listeners to each key		for (int i = 0; i < 10; i++)			digitKey[i].addActionListener(new ActionListener() {				public void actionPerformed(ActionEvent e) {					digitKeyPressed(Integer.parseInt(e.getActionCommand()));				}			});		enterKey.addActionListener(new ActionListener() {			public void actionPerformed(ActionEvent e) {				enterKeyPressed();			}		});		clearKey.addActionListener(new ActionListener() {			public void actionPerformed(ActionEvent e) {				clearKeyPressed();			}		});		cancelKey.addActionListener(new ActionListener() {			public void actionPerformed(ActionEvent e) {				cancelKeyPressed();			}		});		// Allow the user to use the regular keyboard instead of the awt		// keyboard		addKeyListener(new KeyAdapter() {			public void keyPressed(KeyEvent e) {				char keyChar = e.getKeyChar();				int keyCode = e.getKeyCode();				if (keyChar >= '0' && keyChar <= '9') {					digitKeyPressed(keyChar - '0');					e.consume();				} else {					switch (keyCode) {					case KeyEvent.VK_ENTER:						enterKeyPressed();						break;					case KeyEvent.VK_CLEAR:						clearKeyPressed();						break;					case KeyEvent.VK_CANCEL:					case KeyEvent.VK_ESCAPE:						cancelKeyPressed();						break;					}					e.consume();				}			}		});		// Initialze mode and input buffer		currentInput = new StringBuffer();		mode = IDLE_MODE;	}	synchronized String readInput(int mode, int maxValue) {		this.mode = mode;		this.maxValue = maxValue;		currentInput.setLength(0);		cancelled = false;		if (mode == AMOUNT_MODE)			setEcho("0.00");		else			setEcho("");		requestFocus();		try {			wait();		} catch (InterruptedException e) {		}		this.mode = IDLE_MODE;		if (cancelled)			return null;		else			return currentInput.toString();	}	private synchronized void digitKeyPressed(int digit) {		switch (mode) {		case IDLE_MODE:			break;		case PIN_MODE: {			currentInput.append(digit);			StringBuffer echoString = new StringBuffer();			for (int i = 0; i < currentInput.length(); i++)				echoString.append('*');			setEcho(echoString.toString());			break;		}		case AMOUNT_MODE: {			currentInput.append(digit);			String input = currentInput.toString();			if (input.length() == 1)				setEcho("0.0" + input);			else if (input.length() == 2)				setEcho("0." + input);			else				setEcho(input.substring(0, input.length() - 2) + "." + input.substring(input.length() - 2));			break;		}		case MENU_MODE: {			if (digit > 0 && digit <= maxValue) {				currentInput.append(digit);				notify();			} else				getToolkit().beep();			break;		}		}	}	private synchronized void enterKeyPressed() {		switch (mode) {		case IDLE_MODE:			break;		case PIN_MODE:		case AMOUNT_MODE:			if (currentInput.length() > 0)				notify();			else				getToolkit().beep();			break;		case MENU_MODE:			getToolkit().beep();			break;		}	}	private synchronized void clearKeyPressed() {		switch (mode) {		case IDLE_MODE:			break;		case PIN_MODE:			currentInput.setLength(0);			setEcho("");			break;		case AMOUNT_MODE:			currentInput.setLength(0);			setEcho("0.00");			break;		case MENU_MODE:			getToolkit().beep();			break;		}	}	private synchronized void cancelKeyPressed() {		switch (mode) {		case IDLE_MODE:			synchronized (envelopeAcceptor) {				envelopeAcceptor.notify();			}		case PIN_MODE:		case AMOUNT_MODE:		case MENU_MODE:			cancelled = true;			notify();		}	}	private void setEcho(String echo) {		display.setEcho(echo);	}}