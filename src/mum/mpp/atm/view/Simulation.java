package mum.mpp.atm.view;import mum.mpp.atm.core.ATM;import mum.mpp.atm.model.Balance;import mum.mpp.atm.model.Card;import mum.mpp.atm.model.Message;import mum.mpp.atm.model.Money;import mum.mpp.atm.model.Status;import mum.mpp.atm.simulation.SimulatedBank;public class Simulation {	public static final int PIN_MODE = 1;	public static final int AMOUNT_MODE = 2;	public static final int MENU_MODE = 3;	private ATM atm;	private SimCardReader cardReader;	private SimDisplay display;	private SimKeyboard keyboard;	private SimCashDispenser cashDispenser;	private SimDepositEnvelopAcceptor envelopeAcceptor;	private SimReceiptPrinter receiptPrinter;	private GUI gui;	private SimulatedBank simulatedBank;	private static Simulation theInstance;		public Simulation(ATM atm) {		this.atm = atm;		cardReader = new SimCardReader(this);		display = new SimDisplay();		cashDispenser = new SimCashDispenser();		envelopeAcceptor = new SimDepositEnvelopAcceptor();		receiptPrinter = new SimReceiptPrinter();		keyboard = new SimKeyboard(display, envelopeAcceptor);		// Create the GUI containing the above		gui = new GUI(cardReader, display, keyboard, cashDispenser, envelopeAcceptor, receiptPrinter);		simulatedBank = new SimulatedBank();		theInstance = this;		this.atm.getCashDispenser().setInitialCash(getInitialCash());	}	public static Simulation getInstance() {		return theInstance;	}	public Money getInitialCash() {		return gui.getInitialCash();	}	public Card readCard() {		cardReader.proceedInsertion();		return gui.readCard();	}	public void ejectCard() {		cardReader.proceedEjection();	}	public void retainCard() {		cardReader.proceedRetention();	}	public void clearDisplay() {		display.clearDisplay();	}	public void display(String text) {		display.display(text);	}	public String readInput(int mode, int maxValue) {		return keyboard.readInput(mode, maxValue);	}	public void dispenseCash(Money amount) {		cashDispenser.proceedDispensingCash(amount);	}	public boolean acceptEnvelope() {		return envelopeAcceptor.acceptDepositEnvelope();	}	public void printReceiptLine(String text) {		receiptPrinter.println(text);	}	public Status sendMessage(Message message, Balance balances) {		try {			Thread.sleep(1 * 1000);		} catch (InterruptedException e) {		}		return simulatedBank.handleMessage(message, balances);	}	void cardInserted() {		atm.cardInserted();	}	public GUI getGUI() {		return gui;	}	public SimulatedBank getSimulatedBank() {		return simulatedBank;	}}